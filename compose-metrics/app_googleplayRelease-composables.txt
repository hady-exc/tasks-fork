scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: FilesControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: RepeatControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: TagsControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: TimerControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: ReminderControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: StartDateControlSet
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun BaseSettingsContent(
  stable title: String? = @dynamic val <elvis> = toolbarTitle
when {
  <elvis>  @  org.tasks.activities.BaseListSettingsActivity.BaseSettingsContent   ==   null   ->   {
    ""
  }
  else   ->   {
    <elvis>    @    org.tasks.activities.BaseListSettingsActivity.BaseSettingsContent
  }

}

  stable requestKeyboard: Boolean = @dynamic isNew
  stable optionButton: Function2<Composer, Int, Unit>? = @static rememberComposableLambda(1331183756, true, { $composer: Composer?, $changed: Int ->
  if (  $changed   and   0b0011   !=   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1331183756      ,       $changed      ,       -1      ,       "org.tasks.activities.BaseListSettingsActivity.BaseSettingsContent.<anonymous> (BaseListSettingsActivity.kt:116)"      )
    }
    
    
    if (    !    isNew    ) {
      DeleteButton      (      <block>{
        val         <elvis>         =         toolbarTitle        
        when         {
          <elvis>           ==           null           ->           {
            ""
          }
          else           ->           {
            <elvis>
          }

        }

      }      ,       <block>{
        $composer        .        startReplaceGroup        (        452673370        )        
        val         tmp0_group         =         $composer        .        cache        (        $composer        .        changedInstance        (        <this>        )        )                 {
          {
            delete            (            )
          }

        }
        
        $composer        .        endReplaceGroup        (        )        
        tmp0_group
      }      ,       $composer      ,       0      )
    }
    
    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}
, $composer, 0b00110110)
  stable fab: Function2<Composer, Int, Unit>? = @static ComposableSingletons$BaseListSettingsActivityKt.lambda-1
  stable extensionContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static ComposableSingletons$BaseListSettingsActivityKt.lambda-2
  unstable <this>: BaseListSettingsActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ActivityContent(
  unstable <this>: FilterSettingsActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun BaseCaldavSettingsContent(
  stable optionButton: Function2<Composer, Int, Unit>? = @static rememberComposableLambda(-847250198, true, { $composer: Composer?, $changed: Int ->
  if (  $changed   and   0b0011   !=   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -847250198      ,       $changed      ,       -1      ,       "org.tasks.caldav.BaseCaldavCalendarSettingsActivity.BaseCaldavSettingsContent.<anonymous> (BaseCaldavCalendarSettingsActivity.kt:209)"      )
    }
    
    
    if (    !    isNew    ) {
      DeleteButton      (      <block>{
        val         <elvis>         =         <block>{
          caldavCalendar          ?.          <get-name>          (          )
        }        
        when         {
          <elvis>           ==           null           ->           {
            ""
          }
          else           ->           {
            <elvis>
          }

        }

      }      ,       <block>{
        $composer        .        startReplaceGroup        (        2020715292        )        
        val         tmp0_group         =         $composer        .        cache        (        $composer        .        changedInstance        (        <this>        )        )                 {
          {
            delete            (            )
          }

        }
        
        $composer        .        endReplaceGroup        (        )        
        tmp0_group
      }      ,       $composer      ,       0      )
    }
    
    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}
, $composer, 0b00110110)
  stable fab: Function2<Composer, Int, Unit>? = @static ComposableSingletons$BaseCaldavCalendarSettingsActivityKt.lambda-1
  stable extensionContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static ComposableSingletons$BaseCaldavCalendarSettingsActivityKt.lambda-2
  unstable <this>: BaseCaldavCalendarSettingsActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddAccountDialog(
  stable hasTasksAccount: Boolean
  stable hasPro: Boolean
  stable enableMicrosoftSync: Boolean = @static true
  stable selected: Function1<Platform, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddAccountDialogPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddAccountDialogPreviewWithPro()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRandomReminderDialog(
  unstable viewState: ViewState
  stable addAlarm: Function1<Alarm, Unit>
  stable closeDialog: Function0<Unit>
  unused unstable <this>: AddReminderDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddCustomReminderDialog(
  unstable viewState: ViewState
  stable addAlarm: Function1<Alarm, Unit>
  stable closeDialog: Function0<Unit>
  unstable <this>: AddReminderDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRepeatReminderDialog(
  stable openDialog: MutableState<Boolean>
  stable initialInterval: Int
  stable initialUnits: Int
  stable initialRepeat: Int
  stable selected: Function3<Int, Int, Int, Unit>
  unused unstable <this>: AddReminderDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRandomReminder(
  stable time: MutableState<Int>
  stable units: MutableState<Int>
  unused unstable <this>: AddReminderDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddCustomReminder(
  stable time: MutableState<Int>
  stable units: MutableState<Int>
  stable interval: MutableState<Int>
  stable recurringUnits: MutableState<Int>
  stable repeat: MutableState<Int>
  stable showRecurring: Function0<Unit>
  unused unstable <this>: AddReminderDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRecurringReminder(
  stable openDialog: Boolean
  stable interval: MutableState<Int>
  stable units: MutableState<Int>
  stable repeat: MutableState<Int>
  unused unstable <this>: AddReminderDialog
)
restartable skippable fun ShowKeyboard(
  stable visible: Boolean
  stable focusRequester: FocusRequester
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OutlinedIntInput(
  stable time: MutableState<Int>
  stable modifier: Modifier? = @static Companion
  stable minValue: Int = @static 1
  stable autoSelect: Boolean = @static true
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CenteredH6(
  stable resId: Int
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CenteredH6(
  stable text: String
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RadioRow(
  stable index: Int
  stable option: Int
  stable time: MutableState<Int>
  stable units: MutableState<Int>
  stable formatString: Int? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun BodyText(
  stable modifier: Modifier? = @static Companion
  stable text: String
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddAlarmDialog(
  unstable viewState: ViewState
  unstable existingAlarms: ImmutableSet<Alarm>
  stable addAlarm: Function1<Alarm, Unit>
  stable addRandom: Function0<Unit>
  stable addCustom: Function0<Unit>
  stable pickDateAndTime: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddCustomReminderOne()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddCustomReminder()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRepeatingReminderOne()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRepeatingReminder()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRandomReminderOne()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddRandomReminder()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddReminderDialog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NotificationsDisabledBanner(
  stable settings: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AlarmsDisabledBanner(
  stable settings: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubscriptionNagBanner(
  stable subscribe: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuietHoursBanner(
  stable showSettings: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SyncWarningGoogleTasks(
  stable moreInfo: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SyncWarningMicrosoft(
  stable moreInfo: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun BeastModeBanner(
  stable visible: Boolean
  stable showSettings: Function0<Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NotificationsDisabledPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun BeastModePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubscriptionNagPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuietHoursPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MicrosoftWarningPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GoogleTasksWarningPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CheckBox(
  unstable task: Task
  stable onCompleteClick: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CheckBox(
  stable isCompleted: Boolean
  stable isRecurring: Boolean
  stable priority: Int
  stable onCompleteClick: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Chip(
  stable icon: String?
  stable name: String?
  stable theme: Int
  stable showText: Boolean
  stable showIcon: Boolean
  stable onClick: Function0<Unit>
  stable colorProvider: Function1<Int, Int>
  stable clear: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Chip(
  stable text: String? = @static null
  stable icon: String? = @static null
  stable color: Color
  stable onClick: Function0<Unit>? = @static $composer.startReplaceGroup(-1111497228)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.Chip
  stable clear: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChipIcon(
  stable icon: String?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TasksChipIconAndTextPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TasksChipIconTextAndClearPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TasksChipIconPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TasksChipTextPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ChipGroup(
  stable modifier: Modifier? = @static Companion
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ClearButton(
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TextButton(
  stable text: Int
  stable onClick: Function0<Unit>
  stable <this>: Constants
)
fun textButtonColors(
  unused stable <this>: Constants
): ButtonColors
fun textFieldColors(
  unused stable <this>: Constants
): TextFieldColors
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun CustomDialog(
  stable visible: Boolean
  stable onDismiss: Function0<Unit>
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DeleteButton(
  stable title: String
  unstable onDelete: SuspendFunction0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DialogRow(
  stable text: Int
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DisabledText(
  stable text: String
  stable modifier: Modifier? = @static Companion
)
fun rememberDragDropState(
  stable lazyListState: LazyListState
  stable confirmDrag: Function1<Int, Boolean>? = @static $composer.startReplaceGroup(702294691)
val tmp0_group = $composer.cache(false) {
  {     it  :   Int   ->
    true
  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.rememberDragDropState
  stable completeDragDrop: Function0<Unit>
  stable doSwap: Function2<Int, Int, Unit>
): DragDropState
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun DraggableItem(
  stable <this>: LazyItemScope
  unstable dragDropState: DragDropState
  stable index: Int
  stable modifier: Modifier? = @static Companion
  stable content: Function3<@[ParameterName(name = 'isDragging')] Boolean, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FilterChip(
  stable filter: Filter
  stable defaultIcon: String
  stable showText: Boolean
  stable showIcon: Boolean
  stable onClick: Function1<Filter, Unit>
  stable colorProvider: Function1<Int, Int>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CriterionTypeSelectPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InputTextPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SwipeOutDecorationPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FabPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FilterCondition(
  unstable items: ImmutableList<CriterionInstance>
  stable onDelete: Function1<Int, Unit>
  stable doSwap: Function2<Int, Int, Unit>
  stable onClick: Function1<String, Unit>
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FilterConditionRow(
  unstable criterion: CriterionInstance
  stable dragging: Boolean
  stable getIcon: Function1<CriterionInstance, Int>
  stable onClick: Function1<String, Unit>
  unused stable <this>: FilterCondition
)
scheme("[androidx.compose.ui.UiComposable]") fun deleteIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SwipeOutDecoration(
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NewCriterionFAB(
  stable isExtended: Boolean
  stable onClick: Function0<Unit>
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectCriterionType(
  stable title: String
  stable selected: Int
  unstable types: List<String>
  stable onCancel: Function0<Unit>
  stable help: Function0<Unit>? = @static $composer.startReplaceGroup(418162256)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.FilterCondition.SelectCriterionType
  stable onSelected: Function1<Int, Unit>
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ToggleGroup(
  unstable items: List<String>
  stable selected: MutableIntState? = @static $composer.startReplaceGroup(-592862693)
val tmp0_group = $composer.cache(false) {
  mutableIntStateOf  (  0  )
}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.FilterCondition.ToggleGroup
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectFromList(
  unstable names: List<String>
  stable title: String? = @static null
  stable onCancel: Function0<Unit>
  stable onSelected: Function1<Int, Unit>
  unused stable <this>: FilterCondition
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InputTextOption(
  stable title: String
  stable onCancel: Function0<Unit>
  stable onDone: Function1<String, Unit>
  unused stable <this>: FilterCondition
)
fun border()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun OutlinedBox(
  stable modifier: Modifier? = @static Companion
  stable content: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OutlinedSpinner(
  stable text: String
  unstable options: List<String>
  stable onSelected: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OutlinedNumberInput(
  stable number: Int
  stable onTextChanged: Function1<Int, Unit>
  stable onFocus: Function0<Unit>? = @static $composer.startReplaceGroup(-646511173)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.OutlinedNumberInput
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Owner()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NotOwner()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PrincipalList(
  unstable principals: List<PrincipalWithAccess>
  stable onRemove: Function1<PrincipalWithAccess, Unit>?
  unused stable <this>: ListSettingsComposables
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PrincipalRow(
  unstable principal: PrincipalWithAccess
  stable onRemove: Function1<PrincipalWithAccess, Unit>?
  unused stable <this>: ListSettingsComposables
)
fun rememberReminderPermissionState()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ServerSelector(
  stable selected: Int
  stable onSelected: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ServerSelectorPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Invite()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InviteDark()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InviteFilled()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InviteDarkFilled()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ShareInviteDialog(
  stable openDialog: MutableState<Boolean>
  stable email: Boolean
  stable invite: Function1<String, Unit>
  unused stable <this>: ShareInvite
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ShareInvite(
  stable email: Boolean
  stable text: MutableState<String>
  unused stable <this>: ShareInvite
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SignInDialog(
  stable selected: Function1<Platform, Unit>
  stable help: Function0<Unit>
  stable cancel: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ConsentDialog(
  stable agree: Function1<Boolean, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SignInDialogPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DisclosurePreview()
restartable skippable fun Spinner(
  unstable options: List<String>
  unstable values: List<T>
  selected: T
  stable expanded: Boolean
  stable modifier: Modifier? = @static Companion
  stable onSelected: Function1<T, Unit>
  stable setExpanded: Function1<Boolean, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun StartDateChip(
  stable sortGroup: Long?
  stable startDate: Long
  stable compact: Boolean
  stable timeOnly: Boolean
  stable colorProvider: Function1<Int, Int>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubscriptionScreen(
  stable nameYourPrice: Boolean
  stable sliderPosition: Float
  stable github: Boolean = @static false
  stable snackbarHostState: SnackbarHostState? = @static $composer.startReplaceGroup(-686928669)
val tmp0_group = $composer.cache(false) {
  SnackbarHostState  (  )
}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.PurchaseText.SubscriptionScreen
  stable setPrice: Function1<Float, Unit>
  stable setNameYourPrice: Function1<Boolean, Unit>
  stable subscribe: Function2<Int, Boolean, Unit>
  unstable skus: List<Sku>
  stable onBack: Function0<Unit>
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SponsorButton(
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GreetingText(
  stable resId: Int
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GooglePlayButtons(
  stable nameYourPrice: Boolean
  stable sliderPosition: Float
  stable pagerState: PagerState
  stable setNameYourPrice: Function1<Boolean, Unit>
  stable setPrice: Function1<Float, Unit>
  stable subscribe: Function2<Int, Boolean, Unit>
  unstable skus: List<Sku>
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PagerItem(
  stable feature: CarouselItem
  stable disabled: Boolean = @static false
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TasksAccount(
  unstable skus: List<Sku>
  stable subscribe: Function2<Int, Boolean, Unit>
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PurchaseButton(
  stable price: String
  stable monthly: Boolean = @static false
  stable popperText: String? = @static ""
  stable onClick: Function0<Unit>
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NameYourPrice(
  stable sliderPosition: Float
  stable setPrice: Function1<Float, Unit>
  stable subscribe: Function2<Int, Boolean, Unit>
  unstable skus: List<Sku>
  unused unstable <this>: PurchaseText
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PurchaseDialogPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NameYourPricePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubtaskChip(
  stable collapsed: Boolean
  stable children: Int
  stable compact: Boolean
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SwipeOut(
  stable modifier: Modifier? = @static Companion
  stable index: Int
  stable onSwipe: Function1<Int, Unit>
  stable decoration: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static ComposableSingletons$SwipeOutKt.lambda-1
  stable content: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>
  unused stable <this>: SwipeOut
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SyncAccount(
  stable title: Int
  stable cost: Int? = @static null
  stable description: Int
  stable icon: Int
  stable tint: Color? = @static null
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TaskEditIcon(
  stable id: Int
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun TaskEditRow(
  stable iconRes: Int = @static 0
  stable icon: Function2<Composer, Int, Unit>? = @static rememberComposableLambda(-269489378, true, { $composer: Composer?, $changed: Int ->
  if (  $changed   and   0b0011   !=   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -269489378      ,       $changed      ,       -1      ,       "org.tasks.compose.TaskEditRow.<anonymous> (TaskEditRow.kt:18)"      )
    }
    
    TaskEditIcon    (    iconRes    ,     Companion    .    alpha    (    ContentAlpha    .    <get-medium>    (    $composer    ,     ContentAlpha    .    $stable    )    )    .    padding    (    4    .    dp    ,     8    .    dp    ,     20    .    dp    ,     8    .    dp    )    ,     $composer    ,     0    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}
, $composer, 0b00110110)
  stable content: Function2<Composer, Int, Unit>
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AlarmRow(
  unstable vm: ReminderControlSetViewModel? = @dynamic viewModel(null, null, null, null, $composer, 0, 0b1111)
  stable hasNotificationPermissions: Boolean
  stable fixNotificationPermissions: Function0<Unit>
  unstable alarms: ImmutableSet<Alarm>
  stable ringMode: Int
  stable addAlarm: Function1<Alarm, Unit>
  stable deleteAlarm: Function1<Alarm, Unit>
  stable openRingType: Function0<Unit>
  stable pickDateAndTime: Function1<@[ParameterName(name = 'replace')] Alarm?, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Alarms(
  unstable alarms: ImmutableSet<Alarm>
  stable ringMode: Int
  stable replaceAlarm: Function1<Alarm, Unit>
  stable addAlarm: Function0<Unit>
  stable deleteAlarm: Function1<Alarm, Unit>
  stable openRingType: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AlarmRow(
  stable text: String
  stable onClick: Function0<Unit>
  stable remove: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoAlarms()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PermissionDenied()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AttachmentRow(
  unstable attachments: ImmutableSet<TaskAttachment>
  stable openAttachment: Function1<TaskAttachment, Unit>
  stable deleteAttachment: Function1<TaskAttachment, Unit>
  stable addAttachment: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoThumbnail(
  stable filename: String
  stable mimeType: String?
  stable open: Function0<Unit>
  stable delete: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DeleteAttachment(
  stable <this>: BoxScope
  stable onClick: Function0<Unit>
  stable color: Color
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoAttachments()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AttachmentPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CalendarRow(
  stable eventUri: String?
  stable selectedCalendar: String?
  stable onClick: Function0<Unit>
  stable clear: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoCalendar()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NewCalendar()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ExistingCalendar()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CommentsRow(
  unstable comments: List<UserActivity>
  stable copyCommentToClipboard: Function1<String, Unit>
  stable deleteComment: Function1<UserActivity, Unit>
  stable openImage: Function1<Uri, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Comment(
  unstable comment: UserActivity
  stable copyCommentToClipboard: Function1<String, Unit>
  stable deleteComment: Function1<UserActivity, Unit>
  stable openImage: Function1<Uri, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DescriptionRow(
  stable text: String?
  stable onChanged: Function1<CharSequence?, Unit>
  unstable linkify: Linkify?
  unstable markdownProvider: MarkdownProvider?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EmptyDescriptionPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DescriptionPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DueDateRow(
  stable dueDate: Long
  stable is24HourFormat: Boolean
  stable alwaysDisplayFullDate: Boolean
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DueDateRow(
  stable dueDate: String?
  stable overdue: Boolean
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DueDate(
  stable dueDate: String?
  stable overdue: Boolean
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DueDatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoDueDatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EditTextView(
  stable text: String?
  stable hint: String?
  stable onChanged: Function1<CharSequence?, Unit>
  unstable linkify: Linkify?
  unstable markdownProvider: MarkdownProvider?
  stable strikethrough: Boolean = @static false
  stable requestFocus: Boolean = @static false
  stable multiline: Boolean = @static false
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InfoRow(
  stable creationDate: Long?
  stable modificationDate: Long?
  stable completionDate: Long?
  unstable locale: Locale? = @dynamic getDefault()
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InfoPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ListRow(
  stable list: Filter?
  stable colorProvider: Function1<Int, Int>
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ListPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LocationRow(
  unstable location: Location?
  stable hasPermissions: Boolean
  stable onClick: Function0<Unit>
  stable openGeofenceOptions: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Location(
  stable name: String
  stable address: String?
  stable geofenceOn: Boolean
  stable openGeofenceOptions: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoLocation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SampleLocation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityRow(
  stable priority: Int
  stable onChangePriority: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Priority(
  stable selected: Int
  stable onClick: Function1<Int, Unit>? = @static $composer.startReplaceGroup(-457183356)
val tmp0_group = $composer.cache(false) {
  {     it  :   Int   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.edit.Priority
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityLabeled(
  stable selected: Int
  stable onClick: Function1<Int, Unit>? = @static $composer.startReplaceGroup(-366162829)
val tmp0_group = $composer.cache(false) {
  {     it  :   Int   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.compose.edit.PriorityLabeled
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityButton(
  stable <this>: RowScope
  stable priority: Int
  stable selected: Int
  stable onClick: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityPreviewNoDesaturate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PriorityNarrowWidth()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RepeatRow(
  stable recurrence: String?
  stable repeatFrom: Int
  stable onClick: Function0<Unit>
  stable onRepeatFromChanged: Function1<@[RepeatFrom] Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Repeat(
  stable recurrence: String?
  stable repeatFrom: @[RepeatFrom] Int
  stable onRepeatFromChanged: Function1<@[RepeatFrom] Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RepeatPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoRepeatPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun StartDateRow(
  stable startDate: Long
  stable selectedDay: Long
  stable selectedTime: Int
  stable currentTime: Long = @dynamic DateTimeUtils2.currentTimeMillis()
  stable hasDueDate: Boolean
  stable printDate: Function0<String>
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun StartDate(
  stable startDate: Long
  stable selectedDay: Long
  stable selectedTime: Int
  stable currentTime: Long
  stable hasDueDate: Boolean
  stable printDate: Function0<String>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoStartDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FutureStartDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PastStartDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubtaskRow(
  stable originalFilter: CaldavFilter
  stable filter: CaldavFilter
  stable hasParent: Boolean
  existingSubtasks: TasksResults
  unstable newSubtasks: List<Task>
  stable openSubtask: Function1<Task, Unit>
  stable completeExistingSubtask: Function2<Task, Boolean, Unit>
  stable completeNewSubtask: Function1<Task, Unit>
  stable toggleSubtask: Function2<Long, Boolean, Unit>
  stable addSubtask: Function0<Unit>
  stable deleteSubtask: Function1<Task, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NewSubtaskRow(
  unstable subtask: Task
  stable addSubtask: Function0<Unit>
  stable onComplete: Function1<Task, Unit>
  stable onDelete: Function1<Task, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ExistingSubtaskRow(
  unstable task: TaskContainer
  stable indent: Int
  stable onRowClick: Function0<Unit>
  stable onCompleteClick: Function0<Unit>
  stable onToggleSubtaskClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoSubtasks()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SubtasksPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TagsRow(
  unstable tags: ImmutableSet<TagData>
  stable colorProvider: Function1<Int, Int>
  stable onClick: Function0<Unit>
  stable onClear: Function1<TagData, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoTags()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SingleTag()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun BunchOfTags()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TagWithReallyLongName()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TaskEditScreen(
  unstable editViewModel: TaskEditViewModel
  viewState: TaskEditViewState
  unstable comments: List<UserActivity>
  stable save: Function0<Unit>
  stable discard: Function0<Unit>
  stable delete: Function0<Unit>
  stable dismissBeastMode: Function0<Unit>
  stable deleteComment: Function1<UserActivity, Unit>
  stable onClickDueDate: Function0<Unit>
  unstable markdownProvider: MarkdownProvider
  unstable linkify: Linkify?
  unstable locale: Locale
  stable colorProvider: Function1<Int, Int>
)
restartable skippable fun TaskEditScreenPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TimerRow(
  stable started: Long
  stable estimated: Int
  stable elapsed: Int
  stable timerClicked: Function0<Unit>
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NoTimer()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RunningTimer()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TitleRow(
  stable text: String?
  stable onChanged: Function1<CharSequence?, Unit>
  unstable linkify: Linkify?
  unstable markdownProvider: MarkdownProvider?
  stable isCompleted: Boolean
  stable isRecurring: Boolean
  stable priority: Int
  stable onComplete: Function0<Unit>
  stable requestFocus: Boolean
  stable multiline: Boolean
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EmptyTitlePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TitlePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CalendarPicker(
  unstable viewModel: CalendarPickerViewModel? = @dynamic viewModel(null, null, null, null, $composer, 0, 0b1111)
  stable selected: String?
  stable onSelected: Function1<AndroidCalendar?, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CalendarPickerList(
  unstable calendars: List<AndroidCalendar>
  stable selected: String?
  stable onSelected: Function1<AndroidCalendar?, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CalendarPickerPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CalendarPickerNoneSelected()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CustomRecurrence(
  unstable state: ViewState
  stable save: Function0<Unit>
  stable discard: Function0<Unit>
  stable setInterval: Function1<Int, Unit>
  stable setSelectedFrequency: Function1<Frequency, Unit>
  stable setEndDate: Function1<Long, Unit>
  stable setSelectedEndType: Function1<Int, Unit>
  stable setOccurrences: Function1<Int, Unit>
  stable toggleDay: Function1<DayOfWeek, Unit>
  stable setMonthSelection: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Header(
  stable resId: Int
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WeekdayPicker(
  unstable daysOfWeek: List<DayOfWeek>
  unstable selected: List<DayOfWeek>
  stable toggle: Function1<DayOfWeek, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MonthlyPicker(
  unstable monthDay: WeekDay?
  stable dayNumber: Int
  stable dayOfWeek: DayOfWeek
  stable nthWeek: Int
  stable isLastWeek: Boolean
  unstable locale: Locale
  stable onSelected: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EndsPicker(
  stable selection: Int
  stable endDate: Long
  stable endOccurrences: Int
  stable setOccurrences: Function1<Int, Unit>
  stable setEndDate: Function1<Long, Unit>
  stable setSelection: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun RadioRow(
  stable selected: Boolean
  stable onClick: Function0<Unit>
  stable content: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WeeklyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MonthlyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MinutelyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun HourlyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DailyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun YearlyPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DatePickerDialog(
  stable initialDate: Long
  stable selected: Function1<Long, Unit>
  stable dismiss: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DatePickerPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddShortcutToHomeRow(
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddToHomePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddWidgetToHomeRow(
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddToHomePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ListSettingsContent(
  stable <this>: ColumnScope
  stable color: Int
  stable icon: String
  stable text: String
  stable error: String
  stable requestKeyboard: Boolean
  stable isNew: Boolean
  stable setText: Function1<String, Unit>
  stable pickColor: Function0<Unit>
  stable clearColor: Function0<Unit>
  stable pickIcon: Function0<Unit>
  stable addShortcutToHome: Function0<Unit>
  stable addWidgetToHome: Function0<Unit>
  stable extensionContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ListSettingsScaffold(
  stable title: String
  stable color: Color
  stable promptDiscard: Boolean
  stable showProgress: Boolean
  stable dismissDiscardPrompt: Function0<Unit>
  stable save: Function0<Unit>
  stable discard: Function0<Unit>
  stable actions: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ListSettingsScaffoldKt.lambda-1
  stable fab: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ListSettingsScaffoldKt.lambda-2
  stable content: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ProgressBar(
  stable showProgress: Boolean
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PromptAction(
  stable showDialog: Boolean
  stable title: String
  stable onAction: Function0<Unit>
  stable onCancel: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PromptActionPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectColorRow(
  stable color: Int
  stable selectColor: Function0<Unit>
  stable clearColor: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ColorSelectPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectIconRow(
  stable icon: String
  stable selectIcon: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun IconSelectPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TitleInput(
  stable text: String
  stable error: String
  stable requestKeyboard: Boolean
  stable setText: Function1<String, Unit>
  stable modifier: Modifier? = @static Companion
  stable label: String? = @dynamic stringResource(string.display_name, $composer, 0)
  stable errorState: Color = @dynamic MaterialTheme.<get-colorScheme>($composer, MaterialTheme.$stable).secondary
  stable activeState: Color = @dynamic LocalContentColor.<get-current>($composer, 0).copy(
  alpha   =   0.75f
)
  stable inactiveState: Color = @dynamic LocalContentColor.<get-current>($composer, 0).copy(
  alpha   =   0.3f
)
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Toaster(
  stable state: SnackbarHostState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun Toolbar(
  stable title: String
  stable save: Function0<Unit>
  stable optionButton: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TitleBarPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SortSheetContent(
  stable manualSortSelected: Boolean
  stable manualSortEnabled: Boolean
  stable astridSortEnabled: Boolean
  stable selected: Int
  stable setManualSort: Function1<Boolean, Unit>
  stable setAstridSort: Function1<Boolean, Unit>
  stable onSelected: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SortPicker(
  stable selected: Int
  unstable options: Map<Int, Int>
  stable onClick: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SortOption(
  stable resId: Int
  stable selected: Boolean
  stable enabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun BottomSheetContent(
  stable groupMode: Int
  stable sortMode: Int
  stable completedMode: Int
  stable subtaskMode: Int
  stable sortAscending: Boolean
  stable groupAscending: Boolean
  stable completedAscending: Boolean
  stable subtaskAscending: Boolean
  stable manualSort: Boolean
  stable astridSort: Boolean
  stable completedAtBottom: Boolean
  stable setSortAscending: Function1<Boolean, Unit>
  stable setGroupAscending: Function1<Boolean, Unit>
  stable setCompletedAscending: Function1<Boolean, Unit>
  stable setSubtaskAscending: Function1<Boolean, Unit>
  stable setCompletedAtBottom: Function1<Boolean, Unit>
  stable clickGroupMode: Function0<Unit>
  stable clickSortMode: Function0<Unit>
  stable clickCompletedMode: Function0<Unit>
  stable clickSubtaskMode: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SortRow(
  stable icon: ImageVector? = @dynamic Outlined.SwapVert
  stable title: Int
  stable ascending: Boolean
  stable sortMode: Int
  stable body: Int = @dynamic $composer.startReplaceGroup(151864729)
val tmp0_group = $composer.cache($dirty and 0b0001110000000000 == 0b100000000000) {
  sortMode  .  modeString
}

$composer.endReplaceGroup()
tmp0_group@org.tasks.dialogs.SortRow
  stable showAscending: Boolean = @static true
  stable onClick: Function0<Unit>
  stable setAscending: Function1<Boolean, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OrderingButton(
  stable ascending: Boolean
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewSortBottomSheet()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TagPicker(
  unstable viewModel: TagPickerViewModel
  stable onBackClicked: Function0<Unit>
  stable getTagIcon: Function1<TagData, String>
  stable getTagColor: Function1<TagData, Color>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SearchBar(
  unstable viewModel: TagPickerViewModel
  stable onBack: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PickerBox(
  unstable viewModel: TagPickerViewModel
  stable tags: State<List<TagData>>
  stable getTagIcon: Function1<TagData, String>? = @static $composer.startReplaceGroup(-1200569178)
val tmp0_group = $composer.cache(false) {
  {     it  :   TagData   ->
    "label"
  }

}

$composer.endReplaceGroup()
tmp0_group@org.tasks.tags.PickerBox
  stable getTagColor: Function1<TagData, Color>? = @static $composer.startReplaceGroup(-1200567264)
val tmp1_group = $composer.cache(false) {
  {     it  :   TagData   ->
    Companion    .    Gray
  }

}

$composer.endReplaceGroup()
tmp1_group@org.tasks.tags.PickerBox
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun TagRow(
  stable icon: String
  stable iconColor: Color
  stable text: String
  stable onClick: Function0<Unit>
  stable checkBox: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static ComposableSingletons$TagPickerActivityKt.lambda-1
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: CalendarControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: LocationControlSet
)
scheme("[androidx.compose.ui.UiComposable]") fun Content(
  unstable <this>: SubtaskControlSet
)
